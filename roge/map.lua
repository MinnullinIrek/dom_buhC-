unit = require "unit"require "utils"event     = require "events"local mover = {}unit.player.mover = movermover.filler = unit.playerCell = {x =0, y = 0,  color = "black", f = function() end}Cell.__index = Cell-- Cell.__index = function() return {} endCell.create = function (x, y, filler, color, bag)    local t = {}    t.x = x    t.y = y    t.filler = filler        t.color = color or "black"        t.bag = bag     -- print(" cell createcell")     setmetatable(t, Cell)    return tendCell.getVisual = function (self)    -- screen:print2(self)local empty = {}  -- print("getvisual")  -- print(tostring( (self.filler or {}).symbol or " "))  -- screen:print2 (self.filler) local symbol = ((self.filler or {}).symbol or " ") -- print("symbol"..symbol) local bkColor = self.color -- print("bkColor") -- print(bkColor) local color = (self.filler or {}).color or bkColor -- print(color)     return { ["symbol"] = symbol,            ["bkColor"] = bkColor,             ["color"]   = color}endCell.setFiller = function(self, filler)                    if(self.filler == nil) then                        filler.mover.cell.filler = nil                        self.filler = filler                        if(filler.mover)then filler.mover.cell = self end                    else                        filler:interaction(self.filler)                    end                 endlocal Map  = {cells = {}, width = 0, height = 0, ["mover"] = mover}function Map:createCell(x, y, filler, color, bag)    -- print(x..":"..y)    if(self.cells[x] == nil) then self.cells[x] = {} end    local cell              = Cell.create(x, y, filler, color, bag)    self.cells[x][y]        = cell    if filler and filler.mover then        filler.mover.cell   = cell    endendfunction Map:getFreeCell()    local cells = self.cells    for i = 1, self.width do        for j = 1, self.height do            if(cells[i][j].filler == nil) then                return cells[i][j]            end        end    endendfunction Map:getCell(x,y)    return self.cells[x][y]endfunction Map:createMap(lx, ly, bkColor)-- print("createmap")    self.width = lx    self.height = ly    for i = 1, lx do        for j = 1, ly do            local cell = {}            local filler = nil              if Random:random(10) == 1 then filler = unit.createFiller("#", "white", "whall") end                self:createCell(i, j, filler,bkColor)        end    end    local cell = self:getFreeCell()    cell.filler = unit.player    mover.cell = cell    endfunction Map:createMapFromTable(t)    self.width = t.width    self.height = t.height    for i = 1, self.width do        for j = 1, self.height do            local pos = (i - 1)*self.height + j            local ch = t.map:sub(pos, pos)            local filler = nil            local bag    = nil            if ch == ' ' then                            elseif ch == '#' then                filler = unit.createFiller("#", "white", "whall")            elseif ch == '@' then                filler = unit.player            else                if t[ch] == "bag" then                    bag = createItem(t.items[1], t.items[1], 1, "item")                elseif t[ch] == "enemy" then                    filler = unit.createFiller(ch, "red", "enemy")                end            end            self:createCell(i, j, filler, t.bkColor, bag)        end    endendfunction mover:Move(direction)    local x = self.cell.x    local y = self.cell.y    local x0 = x    local y0 = y    if direction == direct.up or direction == direct.w then        x = x - 1    elseif direction == direct.down or direction == direct.s then        x = x + 1    elseif direction == direct.right or direction == direct.d then        y = y + 1    elseif direction == direct.left or direction == direct.a then        y = y - 1    elseif direction == direct.e then        y = y + 1        x = x - 1    elseif direction == direct.q then        x = x - 1        y = y - 1    elseif direction == direct.z then        y = y - 1        x = x + 1    elseif direction == direct.x then        x = x + 1        y = y + 1    end    if      x < 1           then x = 1     elseif  x > Map.width   then x = Map.width end    if      y < 1 then y = 1     elseif  y > Map.height  then y = Map.height end     self:blinkTo(x, y)    local distance = math.sqrt((x-x0)*(x-x0) + (y-y0)*(y-y0))    -- print(distance)    event.send(mover.filler, "move", distance)endfunction mover:blinkTo(x, y)    local cell = self.cell or {}        local filler = self.filler    cell = Map:getCell(x,y)    cell:setFiller(filler)endreturn Map