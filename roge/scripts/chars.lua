local M = {}local function print(...)    oldprint("chars", ...)endevent     = require "events"inventory = require "inventory"tnil = {}nilF = function()end--print("chars")-- f = io.open ("log.txt" , "w")local function plus1(tbl, i)    tbl.innerKeys.current = tbl.innerKeys.current + i        if(tbl.innerKeys.current > tbl.innerKeys.count) then tbl.innerKeys.current = tbl.innerKeys.count        elseif(tbl.innerKeys.current < 1 ) then tbl.innerKeys.current = 1         endendlocal charac = {__index = function(self,key)    return rawget(self,key)end,__newindex = function(self,key, value)    rawset(self, key, value)    if key == "value" then        event.send(self, "set", value)    endend,__add = function(o1,o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and     o2.type == "charac" then     lo2 = o2.value else     lo2 = o2 end    return lo1 + lo2end,__sub = function(o1,o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 - lo2end,__mul = function(o1, o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 * lo2end,__eq = function(o1, o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 == lo2end,__le = function(o1, o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 <= lo2end,__lt = function(o1, o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 < lo2end,__tostring = function(self)    return string.format("charac[%s %d]",self.name, self.value)end}-- charac.__tostring = function(self)    -- return tostring(pp[self][key].value)-- endlocal function createChar(name, startValue)    local Char       = setmetatable({name = name, value = startValue, type = "charac"}, charac)    --pp[Char]         = {name = name, value = startValue, type = "charac"}        return Charendlocal function createCharTables(t)--    setmetatable({}, {
--    __index = function(self, key)
--        return pp[self][key] end,
--    __newindex = function(self, key, value) 
--            screen:print(key)
--            pp[self][key].value = value 
--    end
--    })    --pp[charTable] = t        return tendfunction M.CreateCharacs()    local characs = { innerKeys = {current = 1, count = 3}}    characs.finalChar = createCharTables({                                   hp = createChar("hp", 10),                                    manna = createChar("manna", 2),                                    innerKeys = {current = 1, count = 2},                                    keys = {points = 0}})    characs.baseChars = createCharTables(                            {force  = createChar("force", 1),                              dex    = createChar("dexterity", 1),                              per    = createChar("perception", 1),                              con    = createChar("constitution", 1),                             innerKeys = {current = 1, count = 4},                             keys = {points = 10}})    characs.resultChars = createCharTables({                                stepTmp         = createChar("step time", 1),                                visibleRadius   = createChar("visible radius", 11),                                --attDamage       = createChar("attack damage", 1),                                attTime         = createChar("attack time", 1),                                innerKeys = {current = 1, count = 3},                                keys={}})    characs.damage      = createCharTables({                                crush           = createChar("crush", 1),                                cut             = createChar("cut", 0),                                fire            = createChar("fire", 0),                                sting           = createChar("sting", 0),                                slash           = createChar("slash", 0),                                lightning       = createChar("lightning", 0),                                magic           = createChar("magic", 0),                                volume          = createChar("volume", 0),                                light           = createChar("light", 0),                                acid            = createChar("acid", 0),                                innerKeys = {current = 1, count = 10},                                keys={}                                })    characs.chars= {"finalChar", "baseChars", "resultChars", "damage"}    local function bind(sender, f)        event.subscribe(sender,"set", f)    end    --bind(characs.baseChars.force,   function(value) characs.resultChars.attDamage         = value end   )    bind(characs.baseChars.dex,     function(value) characs.resultChars.attTime         = value + characs.baseChars.force end   )    bind(characs.baseChars.dex,     function(value) characs.resultChars.stepTmp         = 10/value end)    bind(characs.baseChars.per,     function(value) characs.resultChars.visibleRadius   = value end   )    bind(characs.baseChars.con,     function(value) characs.finalChar.hp                  = value end   )    return characsendcharacs = M.CreateCharacs()function characs:show()        local curTbl = self[self.chars[self.innerKeys.current]]    local ch = nil    while ch ~= "Escape" do        local key = Screen.showTable(curTbl)        ch = controller:playerMove()        if(ch == "DownArrow") then            plus1(curTbl, 1)        elseif ch == "UpArrow" then            plus1(curTbl, -1)        elseif ch == "Enter" and curTbl.keys.points > 0 then            curTbl[key].value = curTbl[key].value + 1            curTbl.keys.points = curTbl.keys.points - 1                    elseif ch == "Tab" then            self.innerKeys.current = self.innerKeys.current + 1        if(self.innerKeys.current > #(self.chars)) then self.innerKeys.current = 1 end            curTbl = self[self.chars[self.innerKeys.current]]        end    endendM.characs = characsreturn M