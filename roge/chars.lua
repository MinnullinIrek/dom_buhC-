local M = {}event     = require "events"inventory = require "inventory"tnil = {}nilF = function()endlocal pp = setmetatable({}, {__mode="k"})--print("chars")-- f = io.open ("log.txt" , "w")local function plus1(tbl, i)    tbl.innerKeys.current = tbl.innerKeys.current + i        if(tbl.innerKeys.current > tbl.innerKeys.count-1) then tbl.innerKeys.current = 0         elseif(tbl.innerKeys.current < 0 ) then tbl.innerKeys.current = tbl.innerKeys.count - 1         endendlocal charac = {__index = function(self,key)    return pp[self][key]end,__newindex = function(self,key, value)    pp[self][key] = value    if key == "value" then        event.send(self, "set", value)    endend,__add = function(o1,o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and     o2.type == "charac" then     lo2 = o2.value else     lo2 = o2 end    return lo1 + lo2end,__sub = function(o1,o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 - lo2end,__mul = function(o1, o2)    local lo1    local lo2    if type(o1) == "table" and o1.type == "charac" then lo1 = o1.value else lo1 = o1 end    if type(o2) == "table" and o2.type == "charac" then lo2 = o2.value else lo2 = o2 end    return lo1 * lo2end}-- charac.__tostring = function(self)    -- return tostring(pp[self][key].value)-- endlocal function createChar(name, startValue)    local Char       = setmetatable({}, charac)    pp[Char]         = {name = name, value = startValue, type = "charac"}    return Charendlocal function createCharTables(t)    local charTable = setmetatable({}, {__index = function(self, key) screen:print2(pp[self][key]) return pp[self][key] end,    __newindex = function(self, key, value) pp[self][key].value = value end})    pp[charTable] = t        return charTableendfunction M.CreateCharacs()    local characs = { innerKeys = {current = 1, count = 3}}    characs.finalChar = createCharTables({                                   hp = createChar("hp", 1),                                    manna = createChar("manna", 2),                                    innerKeys = {current = 0, count = 2},                                    keys = {points = 0}})    characs.baseChars = createCharTables(                            {force  = createChar("force", 1),                              dex    = createChar("dexterity", 1),                              per    = createChar("perception", 1),                             innerKeys = {current = 0, count = 2},                             keys = {points = 10}})    characs.resultChars = createCharTables({                                stepTmp         = createChar("step time", 1),                                visibleRadius   = createChar("visible radius", 1),                                innerKeys = {current = 0, count = 1},                                keys={}})    characs.chars= {"finalChar", "baseChars", "resultChars"}    function bind(sender, f)        event.subscribe(sender,"set", f)    end    bind(characs.baseChars.force,   function(value) characs.finalChar.hp                = value end   )    bind(characs.baseChars.dex,     function(value) characs.resultChars.stepTmp         = 10/value end)    bind(characs.baseChars.per,     function(value) characs.resultChars.visibleRadius   = value end   )    return characsendcharacs = M.CreateCharacs()function characs:show()        local curTbl = self[self.chars[self.innerKeys.current]]    while ch ~= "Escape" do        local key = screen:showTable(pp[curTbl])        ch = controller:playerMove()        if(ch == "DownArrow") then            plus1(curTbl, 1)        elseif ch == "UpArrow" then            plus1(curTbl, -1)        elseif ch == "Enter" and curTbl.keys.points > 0 then            curTbl[key].value = curTbl[key] + 1            curTbl.keys.points = curTbl.keys.points - 1                    elseif ch == "Tab" then            self.innerKeys.current = self.innerKeys.current + 1        if(self.innerKeys.current > #(self.chars)) then self.innerKeys.current = 1 end            curTbl = self[self.chars[self.innerKeys.current]]        end    endendM.characs = characsreturn M